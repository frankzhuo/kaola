import org.apache.spark.sql._
import org.apache.spark.{SparkConf, SparkContext}
import org.elasticsearch.hadoop.cfg.ConfigurationOptions._
import org.elasticsearch.spark.sql.EsSparkSQL

   val df_unitmore = EsSparkSQL.esDF(sqlContext, Map(ES_RESOURCE_READ -> "law_unitmore/c_unitmore", ES_NODES -> "10.1.80.181"));
     df_unitmore.registerTempTable("df_unitmore")

   val unitmore = sqlContext.sql("SELECT " +
     "trim(body.areaname) as areaname," +
     "trim(body.businessentity) as businessentity," +
     "trim(body.cardnum) as cardnum," +
     "trim(body.casecode) as casecode," +
     "trim(body.cid) as cid," +
     "trim(body.courtname) as courtname," +
     "trim(body.disrupttypename) as disrupttypename," +
     "trim(body.duty) as duty," +
     "trim(body.gistid) as gistid," +
     "trim(body.gistunit) as gistunit," +
     "trim(body.id) as id," +
     "trim(body.name) as name," +
     "trim(body.performance) as performance," +
     "trim(body.pulishdate) as pulishdate," +
     "trim(body.name) as name," +
     "regexp_replace(regexp_replace(regexp_replace(body.regdate,'年',''),'月',''),'日','') as regdate," +
     "regexp_replace(trim(body.sys_time),' 00:00:00','') as sys_time FROM df_unitmore T");
	 
	 
   val esDataFrame = sqlContext.createDataFrame(unitmore.rdd, unitmore.schema);
   EsSparkSQL.saveToEs(esDataFrame,Map(ES_RESOURCE -> "law_shixin/c_unitmore_new", ES_NODES -> "10.1.80.181"));
   
   
   
   
   
   val df_personmore = EsSparkSQL.esDF(sqlContext, Map(ES_RESOURCE_READ -> "law_personmore/c_personmore", ES_NODES -> "10.1.80.181"));
    df_personmore.registerTempTable("df_personmore");

    val personmore = sqlContext.sql("SELECT " +
      "trim(body.age) as age," +
      "trim(body.areaname) as areaname," +
      "trim(body.cardnum) as cardnum," +
      "trim(body.casecode) as casecode," +
      "trim(body.cid) as cid," +
      "trim(body.courtname) as courtname," +
      "trim(body.disrupttypename) as disrupttypename," +
      "trim(body.duty) as duty," +
      "trim(body.gistid) as gistid," +
      "trim(body.gistunit) as gistunit," +
      "trim(body.id) as id," +
      "trim(body.name) as name," +
      "trim(body.partytypename) as partytypename," +
      "trim(body.performance) as performance," +
      "trim(body.pulishdate) as pulishdate," +
      "regexp_replace(regexp_replace(regexp_replace(body.regdate,'年',''),'月',''),'日','') as regdate," +
      "trim(body.sex) as sex," +
      "regexp_replace(trim(body.sys_time),' 00:00:00','') as sys_time FROM df_personmore T");

    val esDataFrame = sqlContext.createDataFrame(personmore.rdd, personmore.schema)
    EsSparkSQL.saveToEs(esDataFrame,Map(ES_RESOURCE -> "law_shixin/c_personmore_new", ES_NODES -> "10.1.80.181"))
	
	
	
 val df_judgement = EsSparkSQL.esDF(sqlContext, Map(ES_RESOURCE_READ -> "law_judgement/judgement", ES_NODES -> "10.1.80.181"));
     df_judgement.registerTempTable("df_judgement");

   val judgement = sqlContext.sql("SELECT " +
     "nvl(trim(body.court),'') as court," +
     "nvl(trim(body.jtype),'') as jtype," +
     "nvl(trim(body.title),'') as title," +
     "regexp_replace(trim(body.jdate),' 00:00:00','') as jdate," +
     "nvl(trim(body.jnum),'') as jnum," +
     "nvl(trim(body.court_type),'') as court_type," +
     "nvl(trim(body.yuangao),'') as yuangao," +
     "nvl(trim(body.beigao),'') as beigao," +
     "nvl(trim(body.shangshuren),'') as shangshuren," +
     "nvl(trim(body.beishangshuren),'') as beishangshuren," +
     "nvl(trim(body.weitobianhuren),'') as weitobianhuren," +
     "nvl(trim(body.dangshiren),'') as dangshiren," +
     "nvl(trim(body.dangshiren_all),'') as dangshiren_all," +
     "nvl(trim(body.url),'') as url," +
     "nvl(trim(body.content),'') as content," +
     "nvl(trim(body.judge_date),'') as judge_date," +
     "nvl(trim(body.jcase),'') as jcase," +
     "nvl(trim(body.jprocees),'') as jprocees," +
     "nvl(trim(body.jsummary),'') as jsummary," +
     "nvl(trim(body.identity_card),'') as identity_card," +
     "nvl(trim(body.result_str),'') as result_str," +
     "nvl(trim(body.result),'') as result," +
     "regexp_replace(trim(body.sys_time),' 00:00:00','') as sys_time FROM df_judgement T");

   val esDataFrame = sqlContext.createDataFrame(judgement.rdd, judgement.schema)
   EsSparkSQL.saveToEs(esDataFrame,Map(ES_RESOURCE -> "law_shixin/judgement_new", ES_NODES -> "10.1.80.181"))
	
	
	
	